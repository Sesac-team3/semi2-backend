name: CI/CD for Main

on:
  push:
    branches: [ "main" ]

env:
  DOCKER_IMAGE_TAG_NAME: sesacsemi2

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Gradle 빌드 실행 (JAR 파일 생성)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. 권한 부여 및 빌드 실행
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      # 4. Docker 이미지 빌드 (ARM64 아키텍처용)
      - name: Build the Docker image
        run: |
          docker build --platform linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest .

      # 5. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6. Docker 이미지 푸시
      - name: Push the Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest

      # 7. QEMU(Quick Emulator)를 설정
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 8. EC2에 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "Pulling the latest Docker image..."
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest || exit 1

            echo "Stopping and removing existing container..."
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
              sudo docker network prune -f
            fi

            echo "Running the new Docker container..."
            sudo docker run -d -p 8080:8080 \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_URL=${{ secrets.DB_URL }} \
              ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest || exit 1

            echo "Deployment completed successfully!"
